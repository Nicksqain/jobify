import { Avatar, Box, Card, CardBody, CardHeader, HStack, Text, Heading, Badge, Button, Stack, SimpleGrid, Tab, TabIndicator, TabList, TabPanel, TabPanels, Tabs } from '@chakra-ui/react';
import React, { FC, useEffect, useState } from 'react'
import { useAppSelector } from '../../../hooks/redux';
import dayjs from 'dayjs';
import { getUserStatus, isFreelancer, isOrderer } from '../../../helpers/role';
import { Link, useLocation, useParams } from 'react-router-dom';
import PublicAllUserOrders from '../../Orders/AllOrders/PublicAllUserOrders';
import { useQuery } from '@tanstack/react-query';
import { IUser } from '../../../models/IUser';
import { fetchUserInfo } from '../../../api/userApi';
import LoadingToRedirect from '../../../components/LoadingToRedirect';
import PrivateAllUserOrdersTabs from '../../Orders/PrivateAllUserOrdersTabs';
import PrivateAllUserTasksTabs from '../../Orders/PrivateAllUserTasksTabs';

interface ProfileProps {

}

const Profile: FC<ProfileProps> = ({ }) => {
      const { user } = useAppSelector(state => state.userSlice)
      const { userId } = useParams()
      const location = useLocation()
      const hash = location.hash
      const [openedTabIndex, setOpenedTabIndex] = useState<number>(0)
      useEffect(() => {
            switch (hash) {
                  case "#tasks":
                        setOpenedTabIndex(1)
                        break;
                  case "#orders":
                        setOpenedTabIndex(2)
                        break;
                  case "#projects":
                        setOpenedTabIndex(3)
                        break;
                  case "#settings":
                        setOpenedTabIndex(4)
                        break;
                  default:
                        setOpenedTabIndex(0)
                        break;
            }
      }, [location, hash])

      const userInfoQuery = useQuery<IUser>({
            queryKey: ['profileUserOrders', userId],
            queryFn: () => (userId ? fetchUserInfo(userId) : Promise.resolve([])),

      });
      console.log(userInfoQuery)
      return userInfoQuery.isLoading ? (
            <LoadingToRedirect />
      )
            : userInfoQuery.data && (
                  <Stack mt={50}>
                        <Card size="lg" mb={5}>
                              <CardBody>
                                    <HStack alignItems="start" spacing={6} wrap="wrap">
                                          <Avatar mt={-50} size="2xl" name={userInfoQuery.data?.fullname} src='https://sun9-2.userapi.com/impg/NLw60LaO3eJ_WjCqjynwSvAXH0PyXvl_kXHdcw/VlRqYiewJXk.jpg?size=400x400&quality=95&sign=2396d3c2016207dd20176e71088c237f&type=album' />
                                          <Box>
                                                <Text mb={2}>–ù–∞ —Å–µ—Ä–≤–∏—Å–µ —Å {dayjs(userInfoQuery.data.createdAt).format("DD MMMM YYYY").toString()}</Text>
                                                <Heading size="2xl" mb={1}>{userInfoQuery.data?.fullname}</Heading>
                                                <Badge fontSize='0.8em'>{getUserStatus(userInfoQuery.data)}</Badge>
                                                <Stack spacing={2} mt={6} direction="row" align='center' wrap="wrap">
                                                      {isOrderer(user) ?
                                                            <>
                                                                  <Button as={Link} to={"/orders/create"} colorScheme='green' size='md'>
                                                                        –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                                                                  </Button>
                                                                  <Button as={Link} to={"/"} size='md'>
                                                                        –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ
                                                                  </Button>

                                                            </> :
                                                            <>
                                                                  <Button as={Link} to={"/"} colorScheme='green' size='md'>
                                                                        –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ
                                                                  </Button>
                                                                  <Button as={Link} to={"/orders/create"} size='md'>
                                                                        –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                                                                  </Button>
                                                            </>
                                                      }
                                                </Stack>
                                          </Box>
                                    </HStack>
                              </CardBody>
                        </Card>
                        <Stack spacing={6} direction="row" alignItems="start">
                              <Tabs onChange={(index) => setOpenedTabIndex(index)} flex={1} colorScheme='green' isLazy index={openedTabIndex}>
                                    <TabList>
                                          <Tab>–û–±–æ –º–Ω–µ</Tab>
                                          <Tab>{userId === user?.id ?
                                                "–ú–æ–∏ –∑–∞–¥–∞—á–∏" : "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"}</Tab>

                                          <Tab>{userId === user?.id ?
                                                "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" : "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"}</Tab>
                                          {userId === user?.id && <Tab>–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</Tab>}
                                          <Tab>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</Tab>
                                    </TabList>
                                    <TabPanels mt={5} >

                                          {/* –û–ë–û –ú–ù–ï */}
                                          <TabPanel p={0}>
                                                <Heading size="xl" mb={3}>–û–±–æ –º–Ω–µ</Heading>
                                                <Text>–°—Ç—ç–∫: Marvel, Miro, Figma, Principle. (–∏—Å–ø–æ–ª—å–∑—É—é —Ç–∞–∫–∂–µ Sketch, Illustrator) –ü–æ—Å–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–π –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –¥–∏–∑–∞–π–Ω -—Ç–æ–∫–µ–Ω–æ–≤, –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—é—Å—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ. –≠—Å—Ç–∏–º–∏—Ä—É—é –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–∞–¥–∞—á–∏, –æ–±—ä–µ–º–Ω—ã–µ –¥–µ–∫–æ–º–ø–æ–Ω–∏–∑–∏—Ä—É—é.–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ñ–∞—Å–∏–ª–∏—Ç–∏—Ä—É—é –≤—Å—Ç—Ä–µ—á–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º–∏.üôÇ
                                                      –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ä–µ–ª–∏–∑–µ: –†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä –†–§, Vexel, Inmenu, –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, Saportino, Fango –∏ –¥—Ä—É–≥–∏–µ.
                                                      –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∫—Ä—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–∞–ª–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤, CRM-—Å–∏—Å—Ç–µ–º, –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ Dashboard —Å–æ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –ª–æ–≥–∏–∫–æ–π.
                                                      –í —Ü–µ–ª–æ–º –≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å—Ç—Ä–µ–º–ª—é—Å—å –∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É. –ú–æ–≥—É –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—à–µ–Ω–∏—è –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏–∫—É –∏ —Å–≤–æ–π –æ–ø—ã—Ç.–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:
                                                      –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ–¥ NDA, –≥–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –æ—á–Ω–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –ø—É—Ç–µ–º —à–∞—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –≤ zoom</Text>
                                          </TabPanel>
                                          {/* –ú–û–ò –ó–ê–î–ê–ß–ò */}
                                          <TabPanel p={0}>
                                                {userId === user?.id && <Text p={2} size="md">–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∑–∞–∫–∞–∑—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</Text>}

                                                {userId === user?.id ? <PrivateAllUserTasksTabs /> :
                                                      <PublicAllUserOrders userId={userId} queryCfg={{ completedBy: userId }} />}
                                          </TabPanel>
                                          {/* –ú–æ–∏ –∑–∞–∫–∞–∑—ã */}
                                          <TabPanel p={0}>
                                                {userId === user?.id && <Text p={2} size="md">–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–∫–∞–∑—á–∏–∫–∞.</Text>}

                                                {userId === user?.id ? <PrivateAllUserOrdersTabs /> :
                                                      <PublicAllUserOrders userId={userId} queryCfg={{ completedBy: userId }} />}
                                          </TabPanel>
                                          {userId === user?.id && <TabPanel p={0}>–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</TabPanel>}
                                          <TabPanel p={0}>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</TabPanel>
                                    </TabPanels>
                              </Tabs>
                        </Stack>



                  </Stack>
            )
}

export default Profile;